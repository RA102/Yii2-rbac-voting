<?php

namespace app\modules\voting\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Query;

/**
 * This is the model class for table "result".
 *
 * @property int $id
 * @property int $user_id
 * @property int $member_id
 * @property int $result_id
 * @property int $type_id
 * @property int $status_student_id
 * @property int $active
 * @property int $time_voting
 * @property int $updated_at
 */
class Result extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'result';
    }

    public function behaviors()
    {
        return parent::behaviors(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['user_id', 'member_id'], 'required'],
            [['user_id', 'member_id', 'result_id', 'type_id', 'status_student_id', 'active'], 'integer'],
            [['time_voted'], 'date'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'User ID',
            'member_id' => 'Member ID',
            'result_id' => 'Result ID',
            'type_id' => 'Type ID',
            'status_student_id' => 'Status Student ID',
            'active' => 'Active',
            'time_voted' => 'Time Voting',
        ];
    }

    public function getMember()
    {
        return $this->hasOne(Member::className(), ['id' => 'member_id']);
    }

    public function getUsers()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }


    public function getType()
    {
        return $this->hasOne(Type::className(), ['id' => 'type_id']);
    }

    public function getStatusStudent()
    {
        return $this->hasOne(StatusStudent::className(), ['id' => 'status_student_id']);
    }

    public static function getQuantityCommission($params)
    {
        return Result::find()->where(['member_id' => $params])->count();
    }

    public static function getNumberVotesFor($params)
    {
        return Result::find()->where(['member_id' => $params, 'type_id' => 3])->count();
    }

    public static function getNumberVotesAgainst($params)
    {
        return Result::find()->where(['member_id' => $params, 'type_id' => 1])->count();
    }

    public static function getNumberVotesInvalid($params)
    {
        return Result::find()->where(['member_id' => $params, 'type_id' => 2])->count();
    }



}
