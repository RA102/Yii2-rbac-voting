<?php

namespace app\modules\voting\controllers;

use app\modules\voting\models\Member;
use phpDocumentor\Reflection\Types\Integer;
use phpDocumentor\Reflection\Types\Void_;
use PhpOffice\PhpWord\IOFactory;
use PhpOffice\PhpWord\PhpWord;
use PhpOffice\PhpWord\Shared\Converter;
use PhpOffice\PhpWord\SimpleType\Jc;
use PhpOffice\PhpWord\SimpleType\JcTable;
use Yii;
use app\modules\voting\models\Result;
use app\modules\voting\models\ResultSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;

/**
 * ResultController implements the CRUD actions for Result model.
 */
class ResultController extends Controller
{
    /**
     * {@inheritdoc}
     */
//    public function behaviors()
//    {
//        return [
//            'class' => TimestampBehavior::className(),
//        ];
//    }

    public function afterAction($action, $result)
    {
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Result models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new ResultSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        $requestSearch = (object)Yii::$app->request->queryParams;
        $memberIdFromQuery = $requestSearch->ResultSearch['member_id'];

        $countMemberCommission = Result::getQuantityCommission($memberIdFromQuery);
        $countVotesFor = Result::getNumberVotesFor($memberIdFromQuery);
        $countVotesAgainst = Result::getNumberVotesAgainst($memberIdFromQuery);
        $countVotesInvalid = Result::getNumberVotesInvalid($memberIdFromQuery);


        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'countMemberCommission' => $countMemberCommission,
            'countVotesFor' => $countVotesFor,
            'countVotesAgainst' => $countVotesAgainst,
            'countVotesInvalid' => $countVotesInvalid,
        ]);
    }

    /**
     * Displays a single Result model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Result model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
//        $model = new Result();
//
//        if ($model->load(Yii::$app->request->post()) && $model->save()) {
//            return $this->redirect(['view', 'id' => $model->id]);
//        }
//
//        return $this->render('create', [
//            'model' => $model,
//        ]);

        return $this->render('index');
    }

    /**
     * Updates an existing Result model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing Result model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Result model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Result the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Result::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

    public function actionCreateProtocol()
    {
        $student = Member::getMemberIdByActive();
        $countMemberCommission = Result::getQuantityCommission($student->id);
        $countVotesFor = Result::getNumberVotesFor($student->id);
        $countVotesAgainst = Result::getNumberVotesAgainst($student->id);
        $countVotesInvalid = Result::getNumberVotesInvalid($student->id);

//        $xmlFile = simplexml_load_file('../docs/document.xml');
//        $file = file_get_contents('../docs/document.xml');

        $file = fopen('../docs/document.xml', "r");
        $fileSize = filesize('../docs/document.xml');
        $fileContent = fread($file, $fileSize);
        fclose($file);
        str_replace('Специальность', $student->specialty, $fileContent);
        fopen($)
        fwrite($file, $fileContent);



//        $phpWord = new PhpWord();
//        $phpWord->setDefaultFontName('Times New Roman');
//        $phpWord->setDefaultFontSize(14);
//        $section = $phpWord->addSection();
//        $section->addText(
//            'Протокол по итогам тайного голосования', ['size' => 18, 'bold' => true], ['align' => 'center'] );
//        $section->addText('диссертационного совета', ['size' => 14, 'bold' => true], ['align' => 'center'] );
//        $section->addText(" по специальности code " . "«{$student->specialty}»" , ['size' => 14, 'bold' => true], ['align' => 'center']);
//        $section->addText('Карагандинского государственного технического университета', ['size' => 14, 'bold' => true], ['align' => 'center']);
//        $section->addText('от ' . date('«d» F Y') . 'г.', ['size' => 14], ['align' => 'right', 'marginTop' => 500, 'marginBottom' => 100]);
//
//        $section->addText('Подсчет голосов при тайном голосовании по диссертации ', ['size' => 12], ['space' => ['before' => 20]]);
//        $section->addText($student->name, ['bold' => true]);
//        $section->addText(' на соискание степени доктора философии(PhD) по специальности ');
//        $section->addText($student->specialty, ['bold' => true]);
//        $section->addText('Тема докторской дессиртации ', [], ['merginLeft' => 10]);
//        $section->addText("«{$student->theme}».", ['bold' => true]);
//
//        $section2 = $phpWord->addSection(['breakType' => 'continuous', 'marginLeft' => 2000]);
//        $section2->addText('Участвовали в голосовании ' . $countMemberCommission . ' (человек)', ['size' => 14], ['spaceBefore' => 100]);
//        $section2->addText('За ' . $countVotesFor . ' (человек)');
//        $section2->addText('Против ' . $countVotesAgainst . ' (человек)');
//        $section2->addText('Недействительно ' . $countVotesInvalid . ' (человек)');
//
//
//
//        $objWriter = IOFactory::createWriter($phpWord, 'Word2007');
//        $objWriter->save("$student->name" . '.docx');

        return $this->render('index');
            //$this->redirect('index');
    }



}
