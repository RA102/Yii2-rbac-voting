<?php

namespace app\modules\voting\controllers;

use app\modules\voting\models\Member;
use phpDocumentor\Reflection\Types\Integer;
use phpDocumentor\Reflection\Types\Void_;
use PhpOffice\PhpWord\IOFactory;
use PhpOffice\PhpWord\PhpWord;
use PhpOffice\PhpWord\Shared\Converter;
use PhpOffice\PhpWord\Shared\ZipArchive;
use PhpOffice\PhpWord\SimpleType\Jc;
use PhpOffice\PhpWord\SimpleType\JcTable;
use Yii;
use app\modules\voting\models\Result;
use app\modules\voting\models\ResultSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;

/**
 * ResultController implements the CRUD actions for Result model.
 */
class ResultController extends Controller
{
    /**
     * {@inheritdoc}
     */
//    public function behaviors()
//    {
//        return [
//            'class' => TimestampBehavior::className(),
//        ];
//    }

    public function afterAction($action, $result)
    {
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Result models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new ResultSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        if (empty(Yii::$app->request->queryParams)) {
            $objActiveMember = Member::getMemberIdByActive();
            $memberIdFromQuery = $objActiveMember['id'];
        } else {
            $requestSearch = (object)Yii::$app->request->queryParams;
            $memberIdFromQuery = $requestSearch->ResultSearch['member_id'];
        }

        $countMemberCommission = Result::getQuantityCommission($memberIdFromQuery);
        $countVotesFor = Result::getNumberVotesFor($memberIdFromQuery);
        $countVotesAgainst = Result::getNumberVotesAgainst($memberIdFromQuery);
        $countVotesInvalid = Result::getNumberVotesInvalid($memberIdFromQuery);


        //$memberSpecialty = Member::


        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'countMemberCommission' => $countMemberCommission,
            'countVotesFor' => $countVotesFor,
            'countVotesAgainst' => $countVotesAgainst,
            'countVotesInvalid' => $countVotesInvalid,
        ]);
    }

    /**
     * Displays a single Result model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Result model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
//        $model = new Result();
//
//        if ($model->load(Yii::$app->request->post()) && $model->save()) {
//            return $this->redirect(['view', 'id' => $model->id]);
//        }
//
//        return $this->render('create', [
//            'model' => $model,
//        ]);

        return $this->render('index');
    }

    /**
     * Updates an existing Result model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing Result model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Result model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Result the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Result::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

    public function actionCreateProtocol()
    {
//        $student = Member::getMemberIdByActive();
        $student = Member::findOne(['id' => Yii::$app->request->get('member_id')]);
        var_dump(Yii::$app->request->get('member_id'));
        //var_dump($student->specialty, "<br>");
        $countMemberCommission = Result::getQuantityCommission($student->id);
        $countVotesFor = Result::getNumberVotesFor($student->id);
        $countVotesAgainst = Result::getNumberVotesAgainst($student->id);
        $countVotesInvalid = Result::getNumberVotesInvalid($student->id);

        $file = fopen('../docs/document.xml', "r+");
        $fileContent = file_get_contents('../docs/document.xml');

        $fileContent = str_replace("[code]", $student->code, $fileContent);
        $fileContent = str_replace('[speciality]', $student->specialty, $fileContent);
        $fileContent = str_replace('[date]', date("d.m.Y"), $fileContent);
        $fileContent = str_replace('[student]', $student->name.' ', $fileContent);
        $fileContent = str_replace('[theme]', $student->theme, $fileContent);
        $fileContent = str_replace("[countCommision]",  "$countMemberCommission", $fileContent);
        $fileContent = str_replace("[countFor]",  "$countVotesFor", $fileContent);
        $fileContent = str_replace("[countAgainst]",  "$countVotesAgainst", $fileContent);
        $fileContent = str_replace("[countInvalid]",  "$countVotesInvalid", $fileContent);

        file_put_contents('../docs/_/word/document.xml', $fileContent);
        fclose($file);

        $src_dir = "../docs/_/";
        $arch_dir = "../docs/";
        $zip = new \ZipArchive();
        $fileName = $arch_dir . $student->name . ".zip";

        $zip->open('../docs/_/protocol', \ZipArchive::CREATE );
        $file_list = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($src_dir, \FilesystemIterator::SKIP_DOTS), \RecursiveIteratorIterator::LEAVES_ONLY);

        if ($zip->open($fileName, \ZipArchive::CREATE | \ZipArchive::OVERWRITE) === true) {
            foreach ($file_list as $file) {
                if ($file !== $fileName) {
                    if (file_exists($file) && is_readable($file))
                        $zip->addFile($file, substr($file, strlen($src_dir)));
                }
            }
            $zip->close();
            rename($fileName, $arch_dir . $student->name . ".docx");
            return Yii::$app->response->sendFile($arch_dir . $student->name . ".docx");
        }

        return $this->redirect('index');
    }



}
